// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Usuario

model User {
  id                  String         @id() @default(cuid())
  firstName           String         @map("first_name") @db.VarChar(45)
  lastName            String         @map("last_name") @db.VarChar(45)
  username            String         @unique @db.Char(16)
  email               String         @unique @db.VarChar(150)
  phone               String?        @db.Char(10)
  password            String         @db.VarChar(255)
  rfc                 String?        @db.Char(13)
  status              EnumUserStatus @default(activo)
  rol                 EnumUserRole   @default(user)
  documentsSent       Boolean        @default(false) @map("documents_sent")
  stripeAccountId     String?        @map("stripe_account_id") @db.VarChar(155)
  stripeBankAccountId String?        @map("stripe_bank_account_id") @db.VarChar(155)
  keys                UserKey[]      @relation("UserKeys")
  payments            Payment[]

  @@map("users")
}

// Claves de acceso

model UserKey {
  id         String    @id() @default(cuid())
  userId     String    @map("user_id")
  production Boolean   @default(false)
  name       String    @db.VarChar(25)
  key        String    @unique @default(uuid())
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  user       User      @relation("UserKeys", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  payments   Payment[]

  @@map("user_keys")
}

model Payment {
  id                  String   @id() @default(cuid())
  userId              String   @map("user_id")
  UserKeyId           String   @map("user_key_id")
  stripePaymentIntent String   @unique @map("stripe_payment_intent")
  amount              String
  status              String
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userKey             UserKey  @relation(fields: [UserKeyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("payments")
}

// Enums

enum EnumUserRole {
  user
  admin
  root
}

enum EnumUserStatus {
  activo
  suspendido
  eliminado
}
